// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240522170052_Version3.2")]
    partial class Version32
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Admin", b =>
                {
                    b.Property<int>("IdAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAdmin"));

                    b.Property<DateTime>("DateAdminState")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("IdAdmin");

                    b.HasIndex("IdUser");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Backend.Models.Archivement", b =>
                {
                    b.Property<int>("IdArchivement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArchivement"));

                    b.Property<string>("DescriptionArchivement")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameArchivement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdArchivement");

                    b.ToTable("Archivements");
                });

            modelBuilder.Entity("Backend.Models.Farm", b =>
                {
                    b.Property<int>("IdFarm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFarm"));

                    b.Property<DateTime>("CreateDateFarm")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdFarmer")
                        .HasColumnType("int");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("NameFarm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDateFarm")
                        .HasColumnType("datetime2");

                    b.HasKey("IdFarm");

                    b.HasIndex("IdFarmer");

                    b.ToTable("Farms");
                });

            modelBuilder.Entity("Backend.Models.Farmer", b =>
                {
                    b.Property<int>("IdFarmer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFarmer"));

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("NickNameFarmer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFarmer");

                    b.HasIndex("IdUser");

                    b.ToTable("Farmers");
                });

            modelBuilder.Entity("Backend.Models.FarmerArchivements", b =>
                {
                    b.Property<int>("IdFarmerArchivement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFarmerArchivement"));

                    b.Property<DateTime>("DateArchivement")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdArchivement")
                        .HasColumnType("int");

                    b.Property<int>("IdFarmer")
                        .HasColumnType("int");

                    b.HasKey("IdFarmerArchivement");

                    b.HasIndex("IdArchivement");

                    b.HasIndex("IdFarmer");

                    b.ToTable("FarmerArchivements");
                });

            modelBuilder.Entity("Backend.Models.FarmerScore", b =>
                {
                    b.Property<int>("IdFarmerScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFarmerScore"));

                    b.Property<DateTime>("DateScore")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdFarmer")
                        .HasColumnType("int");

                    b.Property<int>("IdScore")
                        .HasColumnType("int");

                    b.Property<float>("PointScore")
                        .HasColumnType("real");

                    b.HasKey("IdFarmerScore");

                    b.HasIndex("IdFarmer");

                    b.HasIndex("IdScore");

                    b.ToTable("FarmerScores");
                });

            modelBuilder.Entity("Backend.Models.Harvest", b =>
                {
                    b.Property<int>("IdHarvest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHarvest"));

                    b.Property<DateTime>("DateBasketProcess")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPlant")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeQuality")
                        .HasColumnType("int");

                    b.Property<float>("WeightHarvest")
                        .HasColumnType("real");

                    b.HasKey("IdHarvest");

                    b.HasIndex("IdPlant");

                    b.HasIndex("IdTypeQuality");

                    b.ToTable("Harvests");
                });

            modelBuilder.Entity("Backend.Models.HistoryPlant", b =>
                {
                    b.Property<int>("IdHistoryPlant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHistoryPlant"));

                    b.Property<DateTime>("DatePlantProcess")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPlant")
                        .HasColumnType("int");

                    b.Property<int>("IdPlantState")
                        .HasColumnType("int");

                    b.HasKey("IdHistoryPlant");

                    b.HasIndex("IdPlant");

                    b.HasIndex("IdPlantState");

                    b.ToTable("HistoryPlants");
                });

            modelBuilder.Entity("Backend.Models.Plant", b =>
                {
                    b.Property<int>("IdPlant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlant"));

                    b.Property<int>("IdFarm")
                        .HasColumnType("int");

                    b.Property<float>("PositionX")
                        .HasColumnType("real");

                    b.Property<float>("PositionZ")
                        .HasColumnType("real");

                    b.HasKey("IdPlant");

                    b.HasIndex("IdFarm");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("Backend.Models.PlantStates", b =>
                {
                    b.Property<int>("IdPlantState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlantState"));

                    b.Property<string>("DescriptionPlantState")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NamePlantState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPlantState");

                    b.ToTable("PlantStates");
                });

            modelBuilder.Entity("Backend.Models.Posts", b =>
                {
                    b.Property<int>("IdPost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPost"));

                    b.Property<DateTime>("DatePost")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionPost")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("IdAdmin")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TitlePost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPost");

                    b.HasIndex("IdAdmin");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Backend.Models.Score", b =>
                {
                    b.Property<int>("IdScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdScore"));

                    b.Property<string>("DescriptionScore")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<float>("MaximunPoints")
                        .HasColumnType("real");

                    b.Property<float>("MinimunPoints")
                        .HasColumnType("real");

                    b.Property<string>("NameScore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdScore");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("Backend.Models.TypeQuality", b =>
                {
                    b.Property<int>("IdTypeQuality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeQuality"));

                    b.Property<string>("DescriptionTypeQuality")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameTypeQuality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTypeQuality");

                    b.ToTable("TypeQualitys");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<DateOnly>("DateBorn")
                        .HasColumnType("date");

                    b.Property<string>("EmailUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordUser")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SurnameUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Models.Admin", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.Farm", b =>
                {
                    b.HasOne("Backend.Models.Farmer", "Farmer")
                        .WithMany()
                        .HasForeignKey("IdFarmer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("Backend.Models.Farmer", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.FarmerArchivements", b =>
                {
                    b.HasOne("Backend.Models.Archivement", "Archivement")
                        .WithMany()
                        .HasForeignKey("IdArchivement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Farmer", "Farmer")
                        .WithMany()
                        .HasForeignKey("IdFarmer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Archivement");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("Backend.Models.FarmerScore", b =>
                {
                    b.HasOne("Backend.Models.Farmer", "Farmer")
                        .WithMany()
                        .HasForeignKey("IdFarmer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Score", "Score")
                        .WithMany()
                        .HasForeignKey("IdScore")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farmer");

                    b.Navigation("Score");
                });

            modelBuilder.Entity("Backend.Models.Harvest", b =>
                {
                    b.HasOne("Backend.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("IdPlant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.TypeQuality", "TypeQuality")
                        .WithMany()
                        .HasForeignKey("IdTypeQuality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("TypeQuality");
                });

            modelBuilder.Entity("Backend.Models.HistoryPlant", b =>
                {
                    b.HasOne("Backend.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("IdPlant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.PlantStates", "PlantStates")
                        .WithMany()
                        .HasForeignKey("IdPlantState")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("PlantStates");
                });

            modelBuilder.Entity("Backend.Models.Plant", b =>
                {
                    b.HasOne("Backend.Models.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("IdFarm")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("Backend.Models.Posts", b =>
                {
                    b.HasOne("Backend.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("IdAdmin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });
#pragma warning restore 612, 618
        }
    }
}

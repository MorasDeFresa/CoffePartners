// <auto-generated />
using System;
using CoffePartners.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeePartners.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoffePartners.Models.Cultivation", b =>
                {
                    b.Property<int>("IdCultivation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCultivation"));

                    b.Property<float>("Area")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateCultivation")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdFarm")
                        .HasColumnType("int");

                    b.Property<int>("IdStateCultivation")
                        .HasColumnType("int");

                    b.HasKey("IdCultivation");

                    b.HasIndex("IdFarm");

                    b.HasIndex("IdStateCultivation");

                    b.ToTable("Cultivations");
                });

            modelBuilder.Entity("CoffePartners.Models.CultivationHarvest", b =>
                {
                    b.Property<int>("IdCultivationHarvest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCultivationHarvest"));

                    b.Property<int>("IdCultivation")
                        .HasColumnType("int");

                    b.Property<int>("IdHarvest")
                        .HasColumnType("int");

                    b.Property<float>("WeightHarvest")
                        .HasColumnType("real");

                    b.HasKey("IdCultivationHarvest");

                    b.HasIndex("IdCultivation");

                    b.HasIndex("IdHarvest");

                    b.ToTable("CultivationHarvests");
                });

            modelBuilder.Entity("CoffePartners.Models.Farm", b =>
                {
                    b.Property<int>("IdFarm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFarm"));

                    b.Property<int>("IdPlayer")
                        .HasColumnType("int");

                    b.Property<string>("NameFarm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("SizeFarm")
                        .HasColumnType("real");

                    b.HasKey("IdFarm");

                    b.HasIndex("IdPlayer");

                    b.ToTable("Farms");
                });

            modelBuilder.Entity("CoffePartners.Models.Harvest", b =>
                {
                    b.Property<int>("IdHarvest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHarvest"));

                    b.Property<DateTime>("DateHarvest")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdTypeQuality")
                        .HasColumnType("int");

                    b.HasKey("IdHarvest");

                    b.HasIndex("IdTypeQuality");

                    b.ToTable("Harvests");
                });

            modelBuilder.Entity("CoffePartners.Models.HarvestProcess", b =>
                {
                    b.Property<int>("IdHarvestProcess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHarvestProcess"));

                    b.Property<float>("HeightWastedGrain")
                        .HasColumnType("real");

                    b.Property<int>("IdCultivationHarvest")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeProcess")
                        .HasColumnType("int");

                    b.HasKey("IdHarvestProcess");

                    b.HasIndex("IdCultivationHarvest");

                    b.HasIndex("IdTypeProcess");

                    b.ToTable("HarvestProcesss");
                });

            modelBuilder.Entity("CoffePartners.Models.Level", b =>
                {
                    b.Property<int>("IdLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLevel"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.HasKey("IdLevel");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("CoffePartners.Models.Machinery", b =>
                {
                    b.Property<int>("IdMachinery")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMachinery"));

                    b.Property<string>("DescriptionMachine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameMachine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PriceMachine")
                        .HasColumnType("real");

                    b.HasKey("IdMachinery");

                    b.ToTable("Machinerys");
                });

            modelBuilder.Entity("CoffePartners.Models.Player", b =>
                {
                    b.Property<int>("IdPlayer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlayer"));

                    b.Property<string>("EmailPlayer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NicknamePlayer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordPlayer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPlayer");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("CoffePartners.Models.Score", b =>
                {
                    b.Property<int>("IdScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdScore"));

                    b.Property<int>("IdFarm")
                        .HasColumnType("int");

                    b.Property<int>("IdLevel")
                        .HasColumnType("int");

                    b.Property<float>("Points")
                        .HasColumnType("real");

                    b.HasKey("IdScore");

                    b.HasIndex("IdFarm");

                    b.HasIndex("IdLevel");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("CoffePartners.Models.StatesCultivation", b =>
                {
                    b.Property<int>("IdStatesCultivation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStatesCultivation"));

                    b.Property<string>("NameStateCultivation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdStatesCultivation");

                    b.ToTable("StatesCultivations");
                });

            modelBuilder.Entity("CoffePartners.Models.TypeProcess", b =>
                {
                    b.Property<int>("IdTypeProcess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeProcess"));

                    b.Property<string>("DescriptionProcess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdMachinery")
                        .HasColumnType("int");

                    b.Property<string>("NameProcess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTypeProcess");

                    b.HasIndex("IdMachinery");

                    b.ToTable("TypeProcesss");
                });

            modelBuilder.Entity("CoffePartners.Models.TypeQuality", b =>
                {
                    b.Property<int>("IdTypeQuality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeQuality"));

                    b.Property<string>("NameQuality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PriceByGr")
                        .HasColumnType("real");

                    b.HasKey("IdTypeQuality");

                    b.ToTable("TypeQualitys");
                });

            modelBuilder.Entity("CoffePartners.Models.Cultivation", b =>
                {
                    b.HasOne("CoffePartners.Models.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("IdFarm")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffePartners.Models.StatesCultivation", "StatesCultivation")
                        .WithMany()
                        .HasForeignKey("IdStateCultivation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("StatesCultivation");
                });

            modelBuilder.Entity("CoffePartners.Models.CultivationHarvest", b =>
                {
                    b.HasOne("CoffePartners.Models.Cultivation", "Cultivation")
                        .WithMany()
                        .HasForeignKey("IdCultivation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffePartners.Models.Harvest", "Harvest")
                        .WithMany()
                        .HasForeignKey("IdHarvest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cultivation");

                    b.Navigation("Harvest");
                });

            modelBuilder.Entity("CoffePartners.Models.Farm", b =>
                {
                    b.HasOne("CoffePartners.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("IdPlayer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("CoffePartners.Models.Harvest", b =>
                {
                    b.HasOne("CoffePartners.Models.TypeQuality", "TypeQuality")
                        .WithMany()
                        .HasForeignKey("IdTypeQuality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeQuality");
                });

            modelBuilder.Entity("CoffePartners.Models.HarvestProcess", b =>
                {
                    b.HasOne("CoffePartners.Models.CultivationHarvest", "CultivationHarvest")
                        .WithMany()
                        .HasForeignKey("IdCultivationHarvest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffePartners.Models.TypeProcess", "TypeProcess")
                        .WithMany()
                        .HasForeignKey("IdTypeProcess")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CultivationHarvest");

                    b.Navigation("TypeProcess");
                });

            modelBuilder.Entity("CoffePartners.Models.Score", b =>
                {
                    b.HasOne("CoffePartners.Models.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("IdFarm")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffePartners.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("IdLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("CoffePartners.Models.TypeProcess", b =>
                {
                    b.HasOne("CoffePartners.Models.Machinery", "Machinery")
                        .WithMany()
                        .HasForeignKey("IdMachinery")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machinery");
                });
#pragma warning restore 612, 618
        }
    }
}
